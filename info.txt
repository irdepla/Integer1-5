                                                            HISTORY OF JAVASCRIPT
1. Birth of JavaScript (1995):
Inventor: JavaScript was created by Brendan Eich at Netscape Communications. Originally, it was developed in just 10 days to run inside Netscape's web browser.


Initial Name: It was first called Mocha, then LiveScript, before being renamed JavaScript in a marketing move to ride the popularity of Java (even though Java and JavaScript are very different).


Purpose: It was designed as a lightweight scripting language for web pages to make them interactive, as HTML and CSS alone were static. 

JavaScript grew rapidly due to the increasing popularity of the web.
Internet Explorer (IE) and Netscape Navigator were the dominant browsers at the time, each with their own implementations of JavaScript, leading to compatibility issues.
DHTML (Dynamic HTML) emerged in the late '90s, combining HTML, CSS, and JavaScript to create interactive websites.


                                                            Primitive and Reference data types

Primitive types are simple, immutable values. This means that once a primitive value is created, it cannot be altered.

Types of primitive data types:

Number: e.g., 10, 3.14
String: e.g., 'Hello', "JavaScript"
Summary of Differences:
Aspect	Primitive Types	Reference Types
Storage	Stored directly in stack memory	Stored in heap memory, reference in stack
Mutability	Immutable (cannot be changed)	Mutable (can be changed)
Assignment	Creates a copy of the value	Copies the reference (points to the same object)
Examples	Number, String, Boolean, Null	Object, Array, Function


                                                            Variable types


                                                            In JavaScript, variables are declared using three keywords:

1. **`var`**: 
   - Function-scoped.
   - Hoisted but initialized as `undefined`.
   - Can be re-declared and re-assigned.

2. **`let`**: 
   - Block-scoped.
   - Hoisted but not initialized.
   - Can be re-assigned but not re-declared in the same scope.

3. **`const`**: 
   - Block-scoped.
   - Hoisted but not initialized.
   - Cannot be re-assigned or re-declared, though object and array values can be modified.